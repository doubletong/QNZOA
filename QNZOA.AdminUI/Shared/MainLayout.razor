@inherits LayoutComponentBase
@using System.Security.Claims;

@inject ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorageService
@inject NavigationManager NavigationManager
@inject IUserService userService
@inject AuthenticationStateProvider AuthenticationStateProvider


<TelerikRootComponent>
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            <div class="row topbar align-items-center">
                <div class="col-md">
                    <CascadingAuthenticationState>
                        <AuthorizeView>
                            <Authorized>
                                <div class="logined">您好，<span>@context.User.Identity.Name</span>！ <button @onclick="LoginOut" class="btn btn-outline-secondary btn-sm"><i class="iconfont icon-logout"></i> 注销</button></div>
                            </Authorized>
                            <NotAuthorized>
                                @*<a href="Identity/Account/Register">注册</a>*@
                                <a href="/Accounts/Login">登录</a>
                            </NotAuthorized>
                        </AuthorizeView>
                    </CascadingAuthenticationState>
                </div>
            </div>
        </div>

        <div class="content px-4">
            @Body
        </div>

    </div>
</TelerikRootComponent>
<BlazoredToasts />


@code {


    string username = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //  var islogined = await sessionStorageService.GetItemAsync<bool>("isLogined");
        if (firstRender)   //第一次加载和并未登录成立，从session 里读取用户信息
        {
            var user = await sessionStorageService.GetItemAsync<QNZOA.Data.User>("currentUser");
            if (user != null)
            {
                ((QNZAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticatedAsync(user);
                NavigationManager.NavigateTo("/");
            }
            
        }
        await sessionStorageService.SetItemAsync("isLogined", false);

    }

    private async Task LoginOut()
    {
        //await localStorage.RemoveItemAsync("username");
        await sessionStorageService.RemoveItemAsync("username");
        await sessionStorageService.RemoveItemAsync("passwordHash");
        ((QNZAuthenticationStateProvider)AuthenticationStateProvider).IsAuthenticated = false;


        NavigationManager.NavigateTo("/accounts/login");
    }

}
