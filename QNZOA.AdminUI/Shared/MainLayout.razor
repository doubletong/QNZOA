@inherits LayoutComponentBase

@inject ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorageService
@inject NavigationManager NavigationManager
@inject IUserService userService
@inject AuthenticationStateProvider AuthenticationStateProvider
    <div class="wrapper @NavMenuCssClass" id="wrapper">

        <aside class="leftcol" id="leftcol">
            <NavMenu />
        </aside>

        <section class="rightcol" id="rightcol">
            <nav class="navbar navbar-expand-lg navbar-light bg-light navbar-primary">
                <a class="navbar-brand" id="openav" href="javascript:void(0);" @onclick="ToggleNavMenu"><i class="iconfont icon-menu"></i></a>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav mr-auto">
                        <li class="nav-item active"><a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a></li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="qnzfinder">
                                <i class="iconfont icon-image" aria-hidden="true"></i> 文件管理
                            </NavLink>                          
                        </li>
                        <li class="nav-item"><a class="nav-link disabled" href="#" tabindex="-1" aria-disabled="true">Disabled</a></li>
                    </ul>
                    <CascadingAuthenticationState>
                        <AuthorizeView>
                            <Authorized>
                                <span class="navbar-text">
                                    您好，<span>@context.User.Identity.Name</span>！
                                </span>
                                <ul class="navbar-nav navbar-right ml-4">
                                    <li class="nav-item dropdown">
                                        <a class="nav-link dropdown-toggle" id="navbarDropdown" href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">个人中心</a>
                                        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                                            <a class="dropdown-item" href="#">修改密码</a><a class="dropdown-item" href="#">Another action</a>
                                            <div class="dropdown-divider"></div><a class="dropdown-item" href="#">Something else here</a>
                                        </div>
                                    </li>
                                    <li class="nav-item">
                                        <a @onclick="LoginOut" class="nav-link" href="javascript:void(0);"><i class="iconfont icon-logout"></i> 退出系统</a>
                                    </li>
                                </ul>
                            </Authorized>
                            <NotAuthorized>
                                @*<a href="Identity/Account/Register">注册</a>*@
                                <a href="/Accounts/Login">登录</a>
                            </NotAuthorized>
                        </AuthorizeView>
                    </CascadingAuthenticationState>

                </div>
            </nav>

            <div class="main-content">
                @Body
            </div>
            <Footer />
        </section>
    </div>
    <BlazoredToasts />


    @code {


        string username = string.Empty;
        private bool collapseNavMenu = false;
      

        private string NavMenuCssClass => collapseNavMenu ? "wrap-nonav" : null;

        private void ToggleNavMenu()
        {
            collapseNavMenu = !collapseNavMenu;
        }

        protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
        {
            //  var islogined = await sessionStorageService.GetItemAsync<bool>("isLogined");
            if (firstRender)   //第一次加载和并未登录成立，从session 里读取用户信息
            {
                var user = await sessionStorageService.GetItemAsync<QNZOA.Data.User>("currentUser");
                if (user != null)
                {
                    ((QNZAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticatedAsync(user);
                    NavigationManager.NavigateTo("/");
                }

            }
            await sessionStorageService.SetItemAsync("isLogined", false);

        }

        private async System.Threading.Tasks.Task LoginOut()
        {
            //await localStorage.RemoveItemAsync("username");
            await sessionStorageService.RemoveItemAsync("currentUser");
            await sessionStorageService.RemoveItemAsync("username");
            await sessionStorageService.RemoveItemAsync("passwordHash");
            ((QNZAuthenticationStateProvider)AuthenticationStateProvider).IsAuthenticated = false;


            NavigationManager.NavigateTo("/accounts/login");
        }

    }
