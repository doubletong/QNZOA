@page "/customers"
@inject ILocalStorageService localStorage
@inject IHttpClientFactory clientFactory

<div class="row mb-3 ">
    <div class="col">
        <div class="form-inline">
            <input type="text" class="form-control mr-sm-2" bind="@vm.Keywords" placeholder="关键字" />
            <button type="button" class="btn btn-info" @onclick="SearchCustomers"><span class="iconfont icon-search"></span> 搜索</button>
        </div>
    </div>
    <div class="col text-right">
        @*<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal" onclick="@AddItem"><span class="iconfont icon-plus"></span> 添加</button>*@
    </div>
</div>



@if (vm.Customers == null)
{
    @*<Loading />*@
}
else
{
    <table class='table table-striped table-bordered table-vmiddle'>
        <thead>
            <tr>
                <th>Logo</th>
                <th>名称</th>
                <th>类型</th>
                <th>联系电话</th>
                <th>邮箱</th>
                <th>主页</th>
                <th>项目数量</th>
                <th>创建时间</th>

                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in vm.Customers)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(item.Logo))
                        {
                            <img src="@item.Logo" style="height:30px;" />
                        }

                    </td>
                    <td>@item.Name</td>
                    <td>
                        @{
                            if (item.CustomerType == 1)
                            {
                                <span>个人</span>
                            }
                            else
                            {
                                <span>公司</span>
                            }

                        }
                    </td>

                    <td>@item.Phone</td>
                    <td><a href="mailto:@item.Email">@item.Email</a></td>
                    <td><a href="@item.Homepage" target="_blank">@item.Homepage</a></td>
                    <td>@item.ProjectCount</td>
                    <td>@string.Format("{0:d}", item.CreatedDate)</td>
                    <td>
                        @*<button type="button" data-toggle="modal" data-target="#exampleModal" title="编辑" onclick="@(async () => await EditItem(item.Id))" class='btn btn-primary btn-sm'>
                                <span class="iconfont icon-edit"></span>
                            </button>
                            <button type="button" class='btn btn-danger btn-sm' @onclick="(async () => await DeleteItem(item.Id))" title="删除"><span class="iconfont icon-delete"></span></button>*@
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="row">
        <div class="col">
            总记录数：@vm.RowCount 条，页：@(vm.PageIndex + 1) / @(vm.LastPageIndex + 1)
        </div>
        <div class="col">
       
            <Pagination PageSize="@vm.PageSize"
                PageIndex="@vm.PageIndex"
                LastPageIndex="@vm.LastPageIndex" ShowPageCount="6"
                PageChanged="@(async (e) => await PagerPageChanged(e))" />
        </div>
    </div>
}




<!-- Modal -->
@*<div class="modal fade modal-customer" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@formTitle</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container">
                        <div class="row">

                            <div class="col">


                                @if (!string.IsNullOrEmpty(errorMessage))
                                {
                                    <div class="alert alert-danger">
                                        <span class="oi oi-circle-x"></span>  @errorMessage
                                    </div>
                                }

                                <div class="form-group ">
                                    <label for="Name" class="control-label">客户名称</label>
                                    <input asp-for="Name" class="form-control @(isInvalidName?"is-invalid":"")" bind="@model.Name" />
                                    <div class="invalid-feedback">
                                        请输入客户名称
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="Phone" class="control-label">类型</label>
                                    <div>
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="radio" id="inlineRadio1" name="CustomerType" checked="@(model.CustomerType == 1)" onchange="@(() => model.CustomerType = 1)" value="1" />
                                            <label class="form-check-label" for="inlineRadio1">个人</label>
                                        </div>
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="radio" id="inlineRadio2" name="CustomerType" checked="@(model.CustomerType == 2)" onchange="@(() => model.CustomerType = 2)" value="2" />
                                            <label class="form-check-label" for="inlineRadio2">公司</label>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="Phone" class="control-label">联系电话</label>
                                    <input name="Phone" class="form-control" bind="@model.Phone" />
                                </div>
                                <div class="form-group">
                                    <label for="Homepage" class="control-label">主页</label>
                                    <input name="Homepage" class="form-control @(isInvalidHomepage?"is-invalid":"")" bind="@model.Homepage" />
                                    <div class="invalid-feedback">
                                        网址格式不正确
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="Email" class="control-label">邮箱</label>
                                    <input name="Email" class="form-control @(isInvalidEmail?"is-invalid":"")" bind="@model.Email" />
                                    <div class="invalid-feedback">
                                        邮箱格式不正确
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label asp-for="Gender" class="control-label">地址</label>
                                    <textarea name="Address" bind="@model.Address" class="form-control"></textarea>
                                </div>
                                <div class="form-group">
                                    <label asp-for="Gender" class="control-label">描述</label>
                                    <textarea name="Description" bind="@model.Description" class="form-control"></textarea>
                                </div>
                            </div>
                            <div class="col-auto">
                                <div class="form-group">
                                    <label asp-for="Gender" class="control-label">公司Logo</label>
                                    <input type="hidden" id="fileHdLogo" bind="@model.Logo" />
                                    <div class="companyLogo" id="companyLogo">
                                        @if (string.IsNullOrEmpty(model.Logo))
                                        {
                                            <span class="oi oi-image" style="font-size:32px;color:#ccc;line-height:98px;"></span>
                                        }
                                        else
                                        {
                                            <img src="@model.Logo" />
                                        }
                                    </div>

                                    <input type="file" name="file" id="inputLogo" class="inputLogo" onchange="@(async () => await LoadLogo())" />
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">关闭</button>
                    <button type="button" class="btn btn-primary" onclick="@(async () => await SaveCustomer())">保存</button>
                </div>
            </div>
        </div>
    </div>*@



@code {

    CustomerPagedVM vm = new CustomerPagedVM();

    string errorMessage = string.Empty;
    string formTitle = "添加客户";
    bool isInvalidName = false;
    bool isInvalidHomepage = false;
    bool isInvalidEmail = false;
    CustomerIM model = new CustomerIM();

    public string Keywords { get; set; }

    //搜索
    private async Task SearchCustomers()
    {

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshData(1);
        }
    }
    protected override async Task OnInitializedAsync()
    {



    }

    //protected override async Task OnInitAsync()
    //{
    //    await JsInterop.SetPageTitleAsync("客户");

    //    var token = await JsInterop.GetTokenAsync();
    //    Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

    //    await RefreshData(1);

    // }
    //绑定数据
    async Task RefreshData(int page)
    {
        try
        {
            //var token = await localStorage.GetItemAsync<string>("token");
            //var httpClient = clientFactory.CreateClient("QNZOA");
            //httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            //var url = $"{httpClient.BaseAddress}Customers/GetCustomers?page={page}&pageSize=10&keywords={vm.Keywords}";
            ////vm = await Http.GetAsync<CustomerPagedVM>();
            //var response = await httpClient.GetAsync(url);
            //response.EnsureSuccessStatusCode();

            //var responseBody = await response.Content.ReadAsStringAsync();
            //vm = JsonConvert.DeserializeObject<CustomerPagedVM>(responseBody);
            //this.StateHasChanged();
        }
        catch (AggregateException ex)
        {
            // Unwrap the aggregate exception
            throw new HttpRequestException(ex.InnerException.Message, ex.InnerException);
        }

    }

    ///// <summary>
    ///// 搜索客户
    ///// </summary>
    //async Task SearchItems()
    //{

    //    await RefreshData(1);
    //}

    //void AddItem()
    //{
    //    model = new CustomerIM { CustomerType = 2 };
    //}

    //async Task EditItem(int id)
    //{

    //    model = await Http.GetJsonAsync<CustomerIM>($"{UriHelper.GetBaseUri()}/api/Customers/EditCustomer/{id}");
    //    formTitle = "编辑客户";
    //}



    //async Task DeleteItem(int id)
    //{
    //    await Http.DeleteAsync($"{UriHelper.GetBaseUri()}/api/Customers/DeleteItem/" + id);
    //    await RefreshData(vm.PageIndex + 1);

    //    JsInterop.ToastrSuccess("客户已经删除成功", "删除客户");
    //}

    //public bool IsEmailValid(string emailaddress)
    //{
    //    try
    //    {
    //        var m = new System.Net.Mail.MailAddress(emailaddress);
    //        return true;
    //    }
    //    catch (FormatException)
    //    {
    //        return false;
    //    }
    //}

    ////加载logo
    //protected async Task LoadLogo()
    //{
    //    var data = await JsInterop.SetImageData("inputLogo");
    //    if (data.Status)
    //    {
    //        model.Logo = data.Message;
    //    }
    //    else
    //    {
    //        JsInterop.ToastrError(data.Message, "公司Logo");
    //    }

    //}

    //protected async Task SaveCustomer()
    //{
    //    #region validate
    //    if (string.IsNullOrEmpty(model.Name))
    //    {
    //        isInvalidName = true;
    //    }
    //    else
    //    {
    //        isInvalidName = false;


    //    }

    //    if (!string.IsNullOrEmpty(model.Homepage))
    //    {
    //        Uri uriResult;
    //        isInvalidHomepage = !(Uri.TryCreate(model.Homepage, UriKind.Absolute, out uriResult) && uriResult.Scheme == Uri.UriSchemeHttp);
    //    }
    //    else
    //    {
    //        isInvalidHomepage = false;
    //        model.Homepage = null;
    //    }




    //    if (!string.IsNullOrEmpty(model.Email))
    //    {
    //        isInvalidEmail = !IsEmailValid(model.Email);

    //    }
    //    else
    //    {
    //        isInvalidEmail = false;
    //        model.Email = null;
    //    }

    //    if (isInvalidName) return;
    //    if (isInvalidEmail) return;


    //    #endregion

    //    if (model.Id > 0)
    //    {
    //        string requestTarget = $"{UriHelper.GetBaseUri()}/api/Customers/PutCustomer/" + model.Id;

    //        //await Http.SendJsonAsync(HttpMethod.Put, requestTarget, model);
    //        //   await RefreshData(vm.PageIndex + 1);

    //        //  Http.SendAsync($"{UriHelper.GetBaseUri()}/api/Customers/PutCustomer/" + model.Id,)

    //        string result = string.Empty;


    //        var message = new HttpRequestMessage(HttpMethod.Put, requestTarget);
    //        message.Content = new StringContent(Json.Serialize(model), System.Text.Encoding.UTF8, "application/json");

    //        try
    //        {

    //            using (HttpResponseMessage response = await Http.SendAsync(message).ConfigureAwait(false))
    //            {


    //                using (HttpContent responseContent = response.Content)
    //                {
    //                    result = await responseContent.ReadAsStringAsync();
    //                    if (response.StatusCode == System.Net.HttpStatusCode.OK)
    //                    {
    //                        JsInterop.ToastrSuccess("客户已经修改成功", "编辑客户");
    //                        await RefreshData(vm.PageIndex + 1);
    //                    }
    //                    else
    //                    {
    //                        JsInterop.ToastrError(result, "编辑客户");
    //                    }


    //                    //System.Diagnostics.Debug.WriteLine(result);
    //                }
    //            }

    //        }
    //        catch (Exception ex)
    //        {
    //            JsInterop.ToastrError(ex.Message, "编辑客户");
    //        }



    //    }
    //    else
    //    {
    //        model.CreatedBy = await JsInterop.GetUsernameAsync();
    //        model.CreatedDate = DateTime.Now;
    //        await Http.SendJsonAsync(HttpMethod.Post, $"{UriHelper.GetBaseUri()}/api/Customers/PostCustomer", model);
    //        await RefreshData(1);

    //        JsInterop.ToastrSuccess("客户已经创建成功", "添加客户");
    //    }

    //    JsInterop.ModalClose("exampleModal");
    //}

    protected async Task PagerPageChanged(int page)
    {
        await RefreshData(page);
    }


}
