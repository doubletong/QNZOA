@page "/finance/daybook"


@attribute [Authorize]

@using QNZOA.AdminUI.Components;

@inject IToastService toastService
@inject ILocalStorageService localStorage
@inject IHttpClientFactory clientFactory
@inject IProjectService projectService
@inject IPaymentlogService paymentlogService


<div class="breadcrumb-container">
    <div class="row">
        <div class="col-md">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">控制面板</a></li>
                    <li class="breadcrumb-item"><a href="javascript:void(0);">财务</a></li>
                    <li class="breadcrumb-item active" aria-current="page">流水帐</li>
                </ol>
            </nav>
        </div>
        <div class="col-md-auto">
            <time id="sitetime">@DateTime.Now.ToLongDateString()</time>
        </div>
    </div>
</div>

<div class="page-customer">
    <QNZCardComponent Title="流水帐" FontIcon="icon-moneycollect">
        <section class="card-body">
            <div class="card-toolbar mb-3">
                <div class="row">
                    <div class="col">
                        <div class="form-inline">

                            <select id="classification" @bind="vm.ProjectId" class="form-control mr-sm-2">
                                <option value="0">请选择 ...</option>
                                @if (Projects != null)
                                {
                                    foreach (var item in Projects)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                }
                            </select>
                            <button type="button" class="btn btn-info" @onclick="SearchCustomers"><span class="iconfont icon-search"></span> 搜索</button>
                        </div>
                    </div>
                    <div class="col-auto">
                        <button class="btn btn-primary" type="button" @onclick="(async () => await EditPayment(0))"><span class="iconfont icon-plus"></span> 添加</button>
                    </div>
                </div>
            </div>


            @if (vm.Paymentlogs == null)
            {
                <div class="d-flex align-items-center">
                    <strong>加载中...</strong>
                    <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class='table table-striped table-bordered'>
                        <thead>
                            <tr>

                                <th>
                                    项目
                                </th>
                                <th> <OrderByHeading OrderBy="@vm.OrderBy" OrderMode="@vm.OrderMode" HeaderName="money" HeaderText="金额" OnClick="OrderPaymentlogs" /></th>

                                <th>说明</th>

                                <th>创建者</th>
                                <th>
                                    <OrderByHeading OrderBy="@vm.OrderBy" OrderMode="@vm.OrderMode" HeaderName="createdDate" HeaderText="创建时间" OnClick="OrderPaymentlogs" />
                                </th>

                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in vm.Paymentlogs)
                            {
                                <tr>

                                    <td>@item.ProjectName</td>
                                    <td class="@(item.Money<0?"text-danger":"")">@string.Format("{0:c}", item.Money)</td>
                                    <td>@item.Description</td>
                                    <td>@string.Format("{0:f}", item.CreatedDate)</td>
                                    <td>@item.CreatedBy</td>
                                    <td>
                                        <a class="btn btn-info btn-sm" href="/projects/@item.Id">
                                            <i class="iconfont icon-ellipsis"></i>
                                        </a>
                                        <button type="button" class="btn btn-primary btn-sm" @onclick="(async () => await EditPayment(item.Id))" title="编辑"><i class="iconfont icon-edit"></i></button>

                                        <button class="btn btn-danger btn-sm" type="button" @onclick="(async () => await DeleteItem(item.Id))" title="删除"><i class="iconfont icon-delete"></i></button>

                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            }
        </section>
        <footer class="card-footer">
            <div class="row table-pager">
                <div class="col-md">
                    <Pagination PageSize="@vm.PageSize"
                                PageIndex="@vm.PageIndex"
                                LastPageIndex="@vm.LastPageIndex" ShowPageCount="6"
                                PageChanged="@(async (e) => await PagerPageChanged(e))" />
                </div>
                <div class="col-md-auto">
                    总记录数：@vm.RowCount 条，页：@(vm.PageIndex + 1) / @(vm.LastPageIndex + 1)
                </div>

            </div>
        </footer>
    </QNZCardComponent>
</div>
@if (im != null)
{
    <EditForm Model="@im" OnValidSubmit="HandleValidSubmit">
        <BSModalWithForm IsVisible="@ModalShow" Title="编辑流水帐">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="Money">金额</label>
                <InputNumber id="Money" @bind-Value="im.Money" class="form-control" />

            </div>
            <div class="form-group">
                <label for="customerId">客户</label>
                <InputSelectNumber id="customerId" @bind-Value="im.ProjectId" class="form-control">
                    <option value="">请选择 ...</option>
                    @if (Projects != null)
                        {
                            foreach (var item in Projects)
                            {
                            <option value="@item.Id">@item.Name</option>
                            }
                        }
                </InputSelectNumber>
            </div>


            <div class="form-group">
                <label for="description">描述</label>
                <InputTextArea id="description" @bind-Value="im.Description" class="form-control" />
            </div>

        </BSModalWithForm>
    </EditForm>
}



@code {
    PaymentlogPagedVM vm = new PaymentlogPagedVM();
    IEnumerable<ProjectForSelectVM> Projects;

    int CurrentId;
    PaymentlogIM im = new PaymentlogIM();
    bool ModalShow = false;



    protected override async Task OnInitializedAsync()
    {

        Projects = await projectService.GetForBusinessSelectAsync();

        await RefreshData(1);
        //   this.StateHasChanged();
    }


    protected async Task PagerPageChanged(int page)
    {
        await RefreshData(page);
    }
    //搜索
    private async Task SearchCustomers()
    {
        await RefreshData(1);
    }

    private async Task OrderPaymentlogs(string orderstr)
    {
        vm.OrderBy = orderstr.Split("|")[0];
        vm.OrderMode = orderstr.Split("|")[1];

        await RefreshData(1);
    }

    private async Task EditPayment(int logId)
    {
        if (logId > 0)
        {
            CurrentId = logId;
            im = await paymentlogService.Edit(logId);
        }
        else
        {
            CurrentId = 0;
            im = new PaymentlogIM();
        }


        ModalShow = true;
    }


    private async Task HandleValidSubmit()
    {
        //  ProjectIM.Description = await JSRuntime.InvokeAsync<string>("RichTextEditor.getTinymceContent", "description");
        try
        {
            if (CurrentId > 0)
            {
                await paymentlogService.UpdateAsync(CurrentId, im);
                toastService.ShowSuccess("流水帐已更新");
            }
            else
            {
                await paymentlogService.CreateAsync(im);
                toastService.ShowSuccess("流水帐已添加");
                // navigationManager.NavigateTo("/projects/index");
            }
            await RefreshData(vm.PageIndex + 1);
            ModalShow = false;

        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);

        }
    }


    private async Task DeleteItem(int id)
    {
        try
        {
            await paymentlogService.Delete(id);
            await RefreshData(vm.PageIndex + 1);
        }
        catch (Exception ex)
        {

            toastService.ShowError(ex.Message);
        }

    }

    //绑定数据
    async Task RefreshData(int page)
    {
        try
        {

            vm = await paymentlogService.GetListAsync(page, 10, vm.ProjectId, vm.OrderBy, vm.OrderMode);
            this.StateHasChanged();
        }
        catch (AggregateException ex)
        {

            toastService.ShowError(ex.Message);
        }

    }

}
