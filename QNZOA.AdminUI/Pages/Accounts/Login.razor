@page "/accounts/login"
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@using SIGOA.Infrastructure;
@inject NavigationManager NavigationManager

@inject IToastService toastService
@*@inject IAccountService accountService*@
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IUserService userService;

@inject Microsoft.Extensions.Configuration.IConfiguration configuration

   
    <div class="page-login">
        <header class="site-header">
            <div class="container">
                <div class="logo"><img src="img/logo.svg" alt=""></div>
            </div>
        </header>
        <div class="loginbox">

            <header class="loginbox-header">用户登录</header>

            <EditForm Model="@loginIM" OnValidSubmit="@HandleValidSubmit" class="loginForm">
                <DataAnnotationsValidator />
                @*<ValidationSummary />*@
                <div class="mb-3">
                    <label for="Username">用户名</label>
                    <InputText id="Username" @bind-Value="loginIM.Username" class="form-control" />
                    <ValidationMessage For="@(() => loginIM.Username)" />
                </div>
                <div class="mb-3">
                    <label for="Password">密码</label>
                    <InputText type="password" id="Password" @bind-Value="loginIM.Password" class="form-control" />
                    <ValidationMessage For="@(() => loginIM.Password)" />
                </div>
                <div class="custom-control custom-checkbox mb-3">
                    <InputCheckbox @bind-Value="@loginIM.IsValidate" class="custom-control-input" id="IsValidate" />
                    <label class="custom-control-label" for="IsValidate">记住我</label>
                </div>
                <button type="submit" class="btn btn-primary btn-block">@((MarkupString)btnText)</button>

            </EditForm>
        </div>
        <Footer />
    </div>
@code {
    private LoginIM loginIM = new LoginIM { IsValidate = false };
    private string btnText = "登录系统";
    //AuthenticationState AuthState;

    private async System.Threading.Tasks.Task HandleValidSubmit()
    {
        try
        {
            btnText = "<span class='spinner-border spinner-border-sm' role='status' aria-hidden='true'></span>  登录中...";

            var checkUser = await userService.GetUserByUsernameAsync(loginIM.Username);

            if (checkUser != null)
            {

                var salt = Convert.FromBase64String(checkUser.SecurityStamp);
                var pwdHash = EncryptionHelper.HashPasswordWithSalt(loginIM.Password, salt);

                if (checkUser.PasswordHash == pwdHash)
                {
                    await sessionStorage.SetItemAsync("username", loginIM.Username);
                    await sessionStorage.SetItemAsync("currentUser", checkUser);

                    ((QNZAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticatedAsync(checkUser);
                    await sessionStorage.SetItemAsync("isLogined", true);  //标记正登录

                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    toastService.ShowError("用户名或密码错误！","登录失败");

                    btnText = "登录系统";
                }


            }






            // AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            //var result = await accountService.LoginAsync(loginIM);

            //if (result.Status)
            //{
            //    NavigationManager.NavigateTo("/");
            //}
            //else
            //{
            //    toastService.ShowError(result.Message);
            //}
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);

        }
    }
}
